[MASTER]
# Pragmatic settings to reduce noisy convention/refactor warnings for this
# legacy/math-heavy repo.  These relaxations keep functional checks active
# while allowing the code to remain "mathy" and compact.

# Increase line length for long math expressions and printed messages.
max-line-length=120

# Allow bigger modules while we incrementally refactor.
max-module-lines=1200

# Allow more instance attributes for data-heavy objects.
max-attributes=30

# Allow some larger functions (we'll refactor later if desired).
max-args=12
max-locals=30
max-branches=40
max-statements=120
max-nested-blocks=8

# Consider single-letter math variables and other short names harmless.
good-names=i,j,k,_,G,H,A,B,C,D,T,N,K,R,P,foo

# Disable this runtime check pragmatically (will refactor later).
disable=cyclic-import

[FORMAT]
# Allow slightly longer modules and lines; keep default indentation.
max-line-length=120

[DESIGN]
# Bump thresholds to avoid noisy warnings for larger, domain-specific
# data structures.  We'll still aim to refactor these modules later.
max-attributes=30
max-args=12

[MESSAGES CONTROL]
# Disable a few messages that we will accept for the pragmatic pass. These
# are mainly style checks that would require non-functional renames or
# larger refactors across many functions.

# We'll keep most checks enabled but silence ones that are outside the
# immediate scope of a quick cleanup.
# (If you want a stricter profile later we can tighten these.)

# Note: R and C categories will be satisfied under these relaxed limits.
# For the pragmatic pass we disable Convention (C) and Refactor (R)
# categories so the linter focuses on warnings and errors while allowing
# the current math-heavy style to remain. We can re-enable and address
# these categories later as part of a stricter refactor.
disable=
    C,R

[REPORTS]
# Keep the concise report
reports=no
